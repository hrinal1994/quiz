{"version":3,"sources":["logo.svg","Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quiz","state","questions","choices","answers","index","disbaled","nextDis","score","curValue","selectedIndex","responseForIncorrect","responseForCorrect","modalShow","lastShow","count","pauseTimer","pauseQuestions","start","indice","setState","console","log","nextQues","length","closeMe","next","setTimeout","alert","prev","radioChange","event","target","value","finalResult","quizToInitialState","window","location","reload","this","map","v","l","className","style","color","marginBottom","marginLeft","Modal","backdrop","size","aria-labelledby","centered","show","Header","class","Body","Footer","Button","onClick","variant","Jumbotron","Card","id","ButtonGroup","toggle","radio","idx","ToggleButton","key","type","name","onChange","Alert","onClose","dismissible","Heading","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db58b5c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {Alert} from 'react-bootstrap';\r\nimport {Button} from 'react-bootstrap'; \r\nimport {ButtonGroup} from 'react-bootstrap';\r\nimport {ToggleButton} from 'react-bootstrap';\r\nimport {Card} from 'react-bootstrap';\r\n import {Jumbotron} from 'react-bootstrap'; \r\n import {Modal} from 'react-bootstrap';\r\n\r\n\r\n\r\nclass Quiz extends Component {\r\n\r\n\r\n    state={\r\n            questions:[\"Everything in React is a ______ ?\",\"What is the name of React.js Developer \",\"How many elements does react component return ?\" , \"Reactjs data flow implementation?\" ,\"Which is used to update the state?\",\"Which of the following API is necessary for React.js component?\",'To achieve dynamic UI updates. Which of the following needs to be updated ?','Which of the following method define default values for properties using props?','Which of the following is not components of Redux?','Which helps react for keeping their data unidirectional?'],\r\n            choices:[['Module','Component','Package','Class'],['Jordan Lee','Tom Lee','Jordan mike','Jordan Walke'],['2 Elements','1 Element','Multiple Elements','None of These'],['Two way data flow','One way data flow','No one','Three way data flow'],['setNewnumber','setnumber','setState','setInitialnumber'],['RenderComponent','Render','Props','State'],['renderComponent','render','props','state'],['getDefaultProps','getPropsValue','getInitialState',' getWillState'],['view','state','reducer','action'],['props','flux','dom','jsx']],\r\n            answers:[\"Component\",'Jordan Walke','Multiple Elements','One way data flow','setState','Render','props','getDefaultProps','state','flux'],\r\n            index:-1,\r\n            disbaled:true,\r\n            nextDis:false,\r\n            score:0,\r\n            curValue:'',\r\n            selectedIndex:0,\r\n            responseForIncorrect:false,\r\n            responseForCorrect:false,\r\n            modalShow:false,\r\n            lastShow:true,\r\n            count:20,\r\n            pauseTimer:'',\r\n            pauseQuestions:''\r\n          \r\n            \r\n            \r\n\r\n           }\r\n\r\n\r\n    start = () => {\r\n        \r\n        let indice = this.state.index;\r\n        ++indice;\r\n        this.setState({ index: indice})\r\n      \r\n        if(indice >-1){ \r\n            console.log(\"enters into start\");\r\n            \r\n            //this.state.pauseQuestions=setInterval( this.nextQues  ,20000);\r\n\r\n            console.log(\"index inside count\"+indice);\r\n           \r\n           \r\n            // this.state.pauseTimer= setInterval(()=>{\r\n\r\n            //     let p= --this.state.count  ;\r\n\r\n            //     if(this.state.count>-1) {\r\n            //          this.setState({ count: p})\r\n            //         }\r\n            //     else {\r\n            //         this.setState({ count: 20})\r\n            //     }\r\n            //  } ,1000);\r\n            \r\n            \r\n             \r\n          \r\n            \r\n}\r\n       \r\n    \r\n    }\r\n\r\n   \r\n nextQues =()=>{\r\n\r\n    \r\n    let indice = this.state.index;\r\n    console.log(indice);\r\n  \r\n    this.setState({ responseForIncorrect: false })\r\n    this.setState({ responseForCorrect: false })\r\n \r\n        \r\n    if(indice>-1 && indice<this.state.questions.length-1)\r\n   {\r\n    ++indice;\r\n    console.log(\"index increase\");\r\n    this.setState({ index: indice})\r\n   \r\n    this.setState({ count: 20})\r\n\r\n   \r\n   \r\n   }\r\n\r\n//    else{\r\n//     clearInterval(this.state.pauseTimer);\r\n//     clearInterval(this.state.pauseQuestions);\r\n//     //this.finalResult();\r\n//    }\r\n\r\n  \r\n\r\n\r\n  \r\n   \r\n\r\n}\r\n\r\n\r\n\r\n    closeMe=()=>{\r\n        \r\n        \r\n        let indice = this.state.index;\r\n\r\n        this.setState({ responseForIncorrect: false })\r\n        this.setState({ responseForCorrect: false })\r\n\r\n        if(this.state.index==this.state.questions.length-1){\r\n           \r\n            this.setState({ modalShow: true })\r\n            this.setState({ lastShow: false })\r\n\r\n        }\r\n\r\n       \r\n        \r\n        if ( this.state.curValue && indice <this.state.questions.length-1) {\r\n            console.log(\"nul\");\r\n            ++indice;\r\n            console.log(indice);\r\n\r\n\r\n\r\n            if (indice > 0) {\r\n                this.setState({ disbaled: false })\r\n            }\r\n\r\n            else if (indice == 0) {\r\n\r\n                this.setState({ disbaled: true })\r\n\r\n            }\r\n\r\n            if (indice == this.state.questions.length - 1) {\r\n\r\n                this.setState({ nextDis: true })\r\n            }\r\n\r\n            this.setState({ index: indice })\r\n\r\n        }\r\n       \r\n        this.setState({ count: 20})\r\n}\r\n\r\n    next = () => {\r\n\r\n\r\n\r\n        let indice = this.state.index;\r\n\r\n      \r\n\r\n        if (this.state.answers[indice] == this.state.curValue) {\r\n            //alert('correct answer');\r\n            this.setState({ responseForCorrect: true })\r\n           \r\n            this.setState({ score: ++this.state.score })\r\n\r\n            setTimeout(this.closeMe ,1500);\r\n        }\r\n        if ((this.state.curValue !== '') && (this.state.answers[indice] !== this.state.curValue)) {\r\n            //alert('wrong answer');\r\n            this.setState({ responseForIncorrect: true })\r\n            setTimeout(this.closeMe ,1500);\r\n           \r\n        }\r\n\r\n        if ((this.state.curValue == '') && (this.state.answers[indice] !== this.state.curValue)) {\r\n            alert('Please choose atleast one option');\r\n           \r\n           \r\n        }\r\n\r\n       \r\n\r\n\r\n    };\r\n\r\n\r\n    prev = () => {\r\n\r\n        let indice = this.state.index;\r\n        --indice;\r\n        console.log(indice);\r\n\r\n        indice = indice < 1 ? 0 : indice;\r\n        if (indice > 0) {\r\n            this.setState({ disbaled: false })\r\n        }\r\n\r\n        else if (indice == 0) {\r\n\r\n            this.setState({ disbaled: true })\r\n\r\n        }\r\n\r\n        if (indice < this.state.questions.length - 1) {\r\n\r\n            this.setState({ nextDis: false })\r\n        }\r\n\r\n\r\n\r\n\r\n        this.setState({ index: indice })\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n    radioChange = (event,index) => {\r\n        // this.setState({ checked:index })\r\n        // alert(event.target.value );\r\n        // alert(index );\r\n       \r\n        this.setState({ curValue: event.target.value ,selectedIndex:index})\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    finalResult =()=>{\r\n        let indice = this.state.index;\r\n         console.log('last index'+indice);\r\n       \r\n\r\n        if (this.state.answers[indice] == this.state.curValue) {\r\n            //alert('correct answer');\r\n            \r\n            this.setState({ responseForCorrect: true })\r\n            this.setState({ score: ++this.state.score })\r\n        }\r\n        if (  (this.state.answers[indice] !== this.state.curValue)) {\r\n            //alert('wrong answer');\r\n            this.setState({ responseForIncorrect: true })\r\n        }\r\n        setTimeout(this.closeMe ,1500);\r\n       \r\n    }\r\n\r\n    quizToInitialState=()=>{\r\n        this.setState({ index: -1 ,modalShow:false})\r\n        window.location.reload();\r\n        \r\n       \r\n    }\r\n\r\n   \r\n\r\n\r\n    render() {\r\n\r\n\r\n      \r\n        let choices = this.state.choices.map(v => \r\n        \r\n        v.map( l => l)\r\n\r\n\r\n        \r\n        )\r\n\r\n     \r\n\r\n     \r\n\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <div className='frame'>\r\n\r\n\r\n              <h1 style={{color:'white',marginBottom:'50px',marginLeft:'20px'}}>React Quiz</h1>\r\n               {/* <h3 style={{color:'white'}}>Time left : {this.state.count}</h3>  */}\r\n\r\n              {\r\n                    (this.state.modalShow)?\r\n                    <Modal  backdrop={true}  size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered show={true}>\r\n                   \r\n                        { (this.state.score > ( (this.state.questions.length)/2)) ?<div><Modal.Header >   <h2 class='mode win'>Congratulations !!! </h2>\r\n                    </Modal.Header> <Modal.Body> <p class='mode'>Great work ! You have cleared the  quiz </p>\r\n                    <h5 class='mode'>Your Score : {this.state.score}/{this.state.questions.length}</h5> </Modal.Body></div> :  \r\n                    <div><Modal.Header >   <h2 class='mode loss'>No Biggie !!!!!</h2>\r\n                    </Modal.Header> <Modal.Body><p class='mode'> Unfortunately , You have not cleared the Quiz.</p>\r\n                    <h5 class='mode'>Your Score : {this.state.score}/{this.state.questions.length}</h5></Modal.Body></div> \r\n                    }\r\n                       \r\n                    \r\n                    <Modal.Footer>\r\n                        <Button onClick={this.quizToInitialState} variant=\"dark\" >\r\n                            Close \r\n                        </Button>\r\n                        \r\n                    </Modal.Footer>\r\n                </Modal>  : null}\r\n\r\n\r\n                { (this.state.index == -1) ?\r\n                <Jumbotron>\r\n                      <h1>Hi React Lover!</h1>\r\n                         <p>\r\n                         This React Quiz will surely help you to brush up your React concepts. It’s Quiz Time!\r\n                           \r\n                         </p>\r\n                         <p>\r\n                                   <Button className=\"\" onClick={this.start} variant=\"primary\">Start </Button>\r\n                         </p>\r\n                </Jumbotron> : null\r\n                }\r\n             \r\n                { (this.state.index>-1  )?\r\n                <div className='questionFrame'>\r\n                           \r\n                    <div >\r\n\r\n                         <p style={{color:'white',marginLeft:'30px'}}>Question {this.state.index+1} of {this.state.questions.length}</p>\r\n                        <Card id='card'>\r\n                            <Card.Body>  <p id=\"ques\">{this.state.questions[this.state.index]}</p></Card.Body>\r\n                        </Card>\r\n                        \r\n\r\n                        <div className='choices'>\r\n\r\n                        \r\n                            <ButtonGroup className='choices' toggle>\r\n                                {choices[this.state.index].map((radio, idx) => (\r\n                                    <ToggleButton\r\n                                        key={idx}\r\n                                        type=\"radio\"\r\n                                        variant=\"info\"\r\n                                        name=\"radio\"\r\n                                        value={radio}\r\n                                        className=\"radios\"\r\n                                        onChange={(event) => this.radioChange(event, idx)}\r\n                                    >\r\n                                        {radio}\r\n                                    </ToggleButton>\r\n                                ))}\r\n                            </ButtonGroup>\r\n                            \r\n\r\n                           \r\n                        </div>\r\n\r\n\r\n                       <div class=\"alerts\">\r\n                       {(this.state.responseForIncorrect) ? <Alert variant=\"danger\"  onClose={this.closeMe} dismissible>\r\n                            <Alert.Heading>Incorrect Answer</Alert.Heading>\r\n                            <p>\r\n                                Unfortunately you have select the incorrect answer !\r\n                           </p>\r\n                        </Alert> : null}\r\n\r\n                        {(this.state.responseForCorrect) ? <Alert variant=\"success\"  onClose={this.closeMe} dismissible>\r\n                            <Alert.Heading>Correct Answer</Alert.Heading>\r\n                            <p>\r\n                                Great ! You have select the right answer \r\n                           </p>\r\n                        </Alert> : null}\r\n                       </div>\r\n                       \r\n                        \r\n                    </div>\r\n                     <h3 style={{color:'white',marginBottom:'50px'}}>Score : {this.state.score}/{this.state.questions.length}</h3> \r\n\r\n                     {\r\n                        (this.state.index && this.state.index < this.state.questions.length)?\r\n                        <Button className=\"btnMe prev\" onClick={()=>this.prev()} variant=\"warning\">Prev</Button>\r\n                        :null\r\n                     }\r\n\r\n\r\n                     {\r\n                        (this.state.index < this.state.questions.length-1)?\r\n                        <Button className=\"btnMe next\" onClick={this.next} variant=\"warning\">Next</Button>\r\n                        :null\r\n                     }\r\n\r\n                     {\r\n                        (this.state.index == this.state.questions.length-1)?\r\n                        <Button  className=\"btnMe next\" onClick={this.finalResult} variant=\"success\">Submit</Button>\r\n                        :null\r\n                     }\r\n\r\n                     \r\n                     \r\n                      \r\n                    \r\n                      \r\n                </div>\r\n                :null\r\n            }\r\n           \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Quiz from './Quiz';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}